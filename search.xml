<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RabbitMQ的使用</title>
    <url>/2024/12/10/RabbitMQ%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="RabbitMQ-简介"><a href="#RabbitMQ-简介" class="headerlink" title="RabbitMQ 简介"></a>RabbitMQ 简介</h1><p>RabbitMQ 是一个消息代理：它接收和转发消息。您可以把它想象成一个邮局：当您将要寄出的邮件放入邮箱时，您可以确信信使最终会将邮件送到收件人手中。在这个比喻中，RabbitMQ 就是邮箱、邮局和信使。</p>

<span id="more"></span>

<h2 id="RabbitMQ-的基本术语"><a href="#RabbitMQ-的基本术语" class="headerlink" title="RabbitMQ 的基本术语"></a>RabbitMQ 的基本术语</h2><ul>
<li>生产者–负责产生消息的程序</li>
<li>消费者–消费者是一个主要等待接收消息的程序</li>
<li>队列–RabbitMQ 中邮箱的名称。虽然消息会流经 RabbitMQ 和您的应用程序，但它们只能存储在队列中。队列仅受主机内存和磁盘限制的约束，本质上是一个大型消息缓冲区。</li>
</ul>
<h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p><img data-src="https://s2.loli.net/2024/12/10/kOD3HjelrEBwsPa.png" alt="RabbitMQ的工作原理"></p>
<h2 id="RabbitMQ-的基本使用"><a href="#RabbitMQ-的基本使用" class="headerlink" title="RabbitMQ 的基本使用"></a>RabbitMQ 的基本使用</h2><h3 id="在普通程序中的使用"><a href="#在普通程序中的使用" class="headerlink" title="在普通程序中的使用"></a>在普通程序中的使用</h3><p>接收者:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">ConnectionFactory factory = <span class="built_in">new</span> ConnectionFactory();</span><br><span class="line">   factory.setHost(&quot;localhost&quot;);</span><br><span class="line">   <span class="keyword">Connection</span> <span class="keyword">connection</span> = factory.newConnection();</span><br><span class="line">   Channel channel = <span class="keyword">connection</span>.createChannel();</span><br><span class="line">   channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">   <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot; [*] Waiting for messages. To exit press CTRL+C&quot;);</span><br></pre></td></tr></table></figure>
<p>发送者：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">ConnectionFactory <span class="keyword">factory</span> = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"><span class="keyword">factory</span>.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> (Connection connection = <span class="keyword">factory</span>.newConnection();</span><br><span class="line">     Channel channel = connection.createChannel()) &#123;</span><br><span class="line">    channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="built_in">String</span> message = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在-Spring-中的使用"><a href="#在-Spring-中的使用" class="headerlink" title="在 Spring 中的使用"></a>在 Spring 中的使用</h3><p>首先导入相关依赖</p>
<p>YML 配置文件：</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rabbitmq</span><span class="punctuation">:</span></span><br><span class="line"> <span class="attribute">addresses</span><span class="punctuation">:</span> <span class="string">localhost</span></span><br><span class="line"> <span class="attribute">username</span><span class="punctuation">:</span> <span class="string">guest</span></span><br><span class="line"> <span class="attribute">password</span><span class="punctuation">:</span> <span class="string">guest</span></span><br><span class="line"> <span class="attribute">virtual-host</span><span class="punctuation">:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>
<p>config:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitConfiguration</span> &#123;</span><br><span class="line"><span class="meta">@Bean(<span class="string">&quot;directExchange&quot;</span>)</span> <span class="comment">// 定义交换机 Bean</span></span><br><span class="line"><span class="keyword">public</span> Exchange exchange()&#123;</span><br><span class="line"><span class="keyword">return</span> ExchangeBuilder.directExchange(<span class="string">&quot;amq.direct&quot;</span>).build()</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean(<span class="string">&quot;yydsQueue&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> Queue queue()&#123;</span><br><span class="line"><span class="keyword">return</span> QueueBuilder</span><br><span class="line">.nonDurable(<span class="string">&quot;my-yyds&quot;</span>) <span class="comment">//非持久化类型，持久化将存储在本地磁盘上</span></span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean(<span class="string">&quot;binding&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> Binding binding (<span class="meta">@Qualifier(<span class="string">&quot;directExchange&quot;</span>)</span> Exchange exchange,</span><br><span class="line"><span class="meta">@Qualifier(<span class="string">&quot;yydsQueue&quot;</span>)</span> Queue queue)&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder</span><br><span class="line">.bind(queue) <span class="comment">//绑定队列</span></span><br><span class="line">.to(exhcange) <span class="comment">//绑定交换机</span></span><br><span class="line">.with(<span class="string">&quot;my-yyds&quot;</span>) <span class="comment">//指定交换机的路由</span></span><br><span class="line">.noargs()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生产者:</p>
<figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@Resource</span></span><br><span class="line">Rabbit <span class="keyword">template</span></span><br><span class="line"><span class="keyword">template</span>.convertAndSend(<span class="string">&quot;amq.direct&quot;</span>,<span class="string">&quot;my-yyds&quot;</span>,<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>消费者:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestListener</span> &#123;</span><br><span class="line"><span class="meta">@RabbitListener</span>(queue = <span class="string">&quot;yyds&quot;</span>) <span class="comment">//绑定消息队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test</span>(<span class="params"><span class="title class_">Message</span> message</span>)&#123;</span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="keyword">new</span> <span class="title class_">String</span>(message.<span class="title function_">getBody</span>())) <span class="comment">//将会打印&quot;Hello World!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Rabbit-的其它知识点"><a href="#Rabbit-的其它知识点" class="headerlink" title="Rabbit 的其它知识点"></a>Rabbit 的其它知识点</h2><h3 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h3><p><img data-src="https://kaoswater1.oss-cn-shenzhen.aliyuncs.com/img/20241210223930372.png" alt="死信队列"></p>
<p>在实际的应用中，可能会遇到一些消息无法被消费者正确处理的情况，比如消息格式错误、消费者处理失败等。如果这些消息一直留在原始队列中，会导致队列堵塞，影响其他消息的消费。为了解决这个问题，RabbitMQ 引入了死信队列的概念</p>
<p>DLX 交换机 一般在消息处于 reject 且不放回队列时触发，或者 TTL 时间过期后</p>
<p>config:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line">public class RabbitConfiguration &#123;</span><br><span class="line">    <span class="variable">@Bean</span>(<span class="string">&quot;directDlExchange&quot;</span>) <span class="comment">// 定义死信交换机</span></span><br><span class="line">    public Exchange <span class="built_in">exchange</span>()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">ExchangeBuilder</span><span class="selector-class">.directExchange</span>(<span class="string">&quot;dlx.direct&quot;</span>)<span class="selector-class">.build</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="selector-tag">Bean</span>(<span class="string">&quot;yydsDlQueue&quot;</span>)</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">Queue</span> <span class="selector-tag">queue</span>()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">QueueBuilder</span></span><br><span class="line">        <span class="selector-class">.nonDurable</span>(<span class="string">&quot;dl-yyds&quot;</span>) </span><br><span class="line">        <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="selector-tag">Bean</span>(<span class="string">&quot;dlBinding&quot;</span>)</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">Binding</span> <span class="selector-tag">binding</span> (<span class="variable">@Qualifier</span>(<span class="string">&quot;directDlExchange&quot;</span>) Exchange exchange,</span><br><span class="line">                            <span class="variable">@Qualifier</span>(<span class="string">&quot;yydsDlQueue&quot;</span>) Queue queue)&#123;</span><br><span class="line">                                <span class="selector-tag">return</span> <span class="selector-tag">BindingBuilder</span></span><br><span class="line">                                <span class="selector-class">.bind</span>(queue) <span class="comment">//绑定队列</span></span><br><span class="line">                                <span class="selector-class">.to</span>(exhcange) <span class="comment">//绑定交换机</span></span><br><span class="line">                                <span class="selector-class">.with</span>(<span class="string">&quot;dl-yyds&quot;</span>) <span class="comment">//指定交换机的路由</span></span><br><span class="line">                                <span class="selector-class">.noargs</span>() </span><br><span class="line">                            &#125; </span><br><span class="line">    @<span class="selector-tag">Bean</span>(<span class="string">&quot;directExchange&quot;</span>) </span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">Exchange</span> <span class="selector-tag">exchange</span>()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">ExchangeBuilder</span><span class="selector-class">.directExchange</span>(<span class="string">&quot;amq.direct&quot;</span>)<span class="selector-class">.build</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="selector-tag">Bean</span>(<span class="string">&quot;yydsQueue&quot;</span>)</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">Queue</span> <span class="selector-tag">queue</span>()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">QueueBuilder</span></span><br><span class="line">        <span class="selector-class">.deadLetterExchange</span>(<span class="string">&quot;dlx.direct&quot;</span>)</span><br><span class="line">        <span class="selector-class">.deadLetterRoutingKey</span>(<span class="string">&quot;dl-yyds&quot;</span>)</span><br><span class="line">        <span class="selector-class">.nonDurable</span>(<span class="string">&quot;yyds&quot;</span>) <span class="comment">//非持久化类型，持久化将存储在本地磁盘上</span></span><br><span class="line">        <span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="selector-tag">Bean</span>(<span class="string">&quot;binding&quot;</span>)</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">Binding</span> <span class="selector-tag">binding</span> (<span class="variable">@Qualifier</span>(<span class="string">&quot;directExchange&quot;</span>) Exchange exchange,</span><br><span class="line">                            <span class="variable">@Qualifier</span>(<span class="string">&quot;yydsQueue&quot;</span>) Queue queue)&#123;</span><br><span class="line">                                <span class="selector-tag">return</span> <span class="selector-tag">BindingBuilder</span></span><br><span class="line">                                <span class="selector-class">.bind</span>(queue) <span class="comment">//绑定队列</span></span><br><span class="line">                                <span class="selector-class">.to</span>(exhcange) <span class="comment">//绑定交换机</span></span><br><span class="line">                                <span class="selector-class">.with</span>(<span class="string">&quot;my-yyds&quot;</span>) <span class="comment">//指定交换机的路由</span></span><br><span class="line">                                <span class="selector-class">.noargs</span>() </span><br><span class="line">                            &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>消费者:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestListener</span> &#123;</span><br><span class="line"><span class="meta">@RabbitListener</span>(queue = <span class="string">&quot;dl-yyds&quot;</span>) <span class="comment">//绑定死信消息队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">test</span>(<span class="params"><span class="title class_">Message</span> message</span>)&#123;</span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="keyword">new</span> <span class="title class_">String</span>(message.<span class="title function_">getBody</span>())) <span class="comment">//将会打印&quot;Hello World!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="工作队列模式"><a href="#工作队列模式" class="headerlink" title="工作队列模式"></a>工作队列模式</h3><p><img data-src="https://kaoswater1.oss-cn-shenzhen.aliyuncs.com/img/20241210224606112.png" alt="工作队列"></p>
<p>设置两个listener即可，如果没有预先存储，多个listner是以轮询的方式进行消费<br/><br>如果程序运行前队列已经有消息，则根据<em>precount</em>的缺省值进行分配，<em>precount</em>为1时则等同于轮询</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote>
<p>代码来源为B站UP  <a href="https://space.bilibili.com/37737161">青空の霞光</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>git的使用</title>
    <url>/2024/12/09/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h1><h3 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h3><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>
<span id="more"></span>

<p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>
<p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>
<h3 id="git的基本语法"><a href="#git的基本语法" class="headerlink" title="git的基本语法"></a>git的基本语法</h3><h4 id="git的提交与修改"><a href="#git的提交与修改" class="headerlink" title="git的提交与修改"></a>git的提交与修改</h4><ul>
<li><code>git add</code> 将文件提交到暂存区</li>
<li><code>git commit -m &quot;Your description&quot;</code> 添加提交的信息</li>
<li><code>git push</code> 提交上传远程代码并合并</li>
<li><code>git log</code> 显示操作日志</li>
<li><code>git reset -- hard</code> 回退版本</li>
<li><code>git clear</code> 清除控制台信息</li>
<li><code>git reflog</code> 打印信息</li>
<li><code>pwd</code> 显示当前工作目录</li>
</ul>
<h4 id="git的远程操作与分支操作"><a href="#git的远程操作与分支操作" class="headerlink" title="git的远程操作与分支操作"></a>git的远程操作与分支操作</h4><ul>
<li><code>git branch</code> 查看当前目录存在的分支</li>
<li><code>git branch &quot;name&quot; -d</code> 删除分支</li>
<li><code>git checkout &quot;name&quot;</code> 切换分支</li>
<li><code>git pull</code> 下载远程代码并合并</li>
<li><code>git clone url</code> 克隆仓库到本地</li>
<li><code>git remote add origin url</code> 添加远程仓库</li>
<li><code>git push origin master</code> 提交本地分支</li>
<li><code>git fetch</code> 获取远程仓库信息</li>
</ul>
<p><img data-src="https://kaoswater1.oss-cn-shenzhen.aliyuncs.com/img/20241209154617048.jpg" alt="插图1"></p>
]]></content>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring的AOP</title>
    <url>/2025/05/16/Spring%E4%B8%ADAOP%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<h1 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h1><p> AOP 是 Aspect Oriented Programming（面向切面编程）的首字母缩写，是一种编程范式，它的目的是通过分离横切关注点来提升代码的模块化程度。</p>
<span id="more"></span>

<h2 id="AOP的实现原理"><a href="#AOP的实现原理" class="headerlink" title="AOP的实现原理"></a>AOP的实现原理</h2><p>在 Spring Framework中，虽然 Spring AOP 的使用方式发生过很大的变化，但其背后的动态代理技术并没有改变。</p>
<p>动态代理就是在运行时动态地为对象创建代理的技术。在 Spring 中，由 AOP 框架创建、用来实现切面的对象为 AOP 代理，一般采用JDK动态代理或者 CGLIB 代理，两者在使用的区别具体如下图所示：</p>
<p><img data-src="https://imgur.la/images/2025/05/16/1aa63ad3b461490c9.png" alt="动态代理图示"></p>
<p>被切面拦截的对象成为<strong>目标对象</strong>或<strong>通知对象</strong>，因为 Spring 用了动态代理，所以目标对象就是要被代理的对象。</p>
<h3 id="JDK的动态代理"><a href="#JDK的动态代理" class="headerlink" title="JDK的动态代理"></a>JDK的动态代理</h3><p>下面以 JDK 动态代理为例，给出调用 Hello 的主流程</p>
<ul>
<li>要被代理的 Hello 接口及其实现片段</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Hello</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SpringHello</span> <span class="title">imoplements</span> <span class="title">Hello</span>&#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Hello Spring&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>随后，我们可以设计一个 InvocationHandler ，于是对代理对象的调用转为调用 invoke 方法，传入的参数中就包含了所调用的方法和实际的参数。</p>
<ul>
<li>在 <code>Hello.say()</code> 前后打印日志的 InvocationHandler</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> LogHandler <span class="keyword">implements</span> InvocationHandler &#123;</span><br><span class="line">    <span class="keyword">private</span> Hello <span class="keyword">source</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LogHandler(Hello <span class="keyword">source</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">source</span> = <span class="keyword">source</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> Object invoke(Object proxy,Method method,Object[] args)thorws Throwble&#123;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">&quot;Ready to say something&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mehod.invoke(<span class="keyword">source</span>,args)</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.prinln(<span class="string">&quot;Already say something&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，再通过 <code>Proxy.newProxyInstance()</code> 为 Hello 实现类的 Bean 实例创建使用 LogHandler 的代理，如下面的代码所示</p>
<ul>
<li>创建 JDK 动态代理并调用方法</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="title class_">String</span>[] args</span>)&#123;</span><br><span class="line">        <span class="title class_">Hello</span> original = <span class="keyword">new</span> <span class="title class_">Hello</span>();</span><br><span class="line">        <span class="title class_">Hello</span> target = (<span class="title class_">Hello</span>) <span class="title class_">Proxy</span>.<span class="title function_">newProxyInstance</span>(<span class="title class_">Hello</span>.<span class="property">class</span>.<span class="title function_">getClassLoader</span>(),original.<span class="title function_">getClass</span>().<span class="title function_">getInterfaces</span>(),<span class="keyword">new</span> <span class="title class_">LogHandler</span>(original));</span><br><span class="line">        target.<span class="title function_">say</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过 <code>Proxy.newProxyInstance()</code> 创建 <code>interface</code> 实例，它需要3个参数：</p>
<ol>
<li>使用的 <code>ClassLoader</code> ，通常就是接口类的 <code>ClassLoader</code> ；</li>
<li>需要实现的接口数组，至少需要传入一个接口仅需；</li>
<li>用来处理接口方法调用的 <code>InvocationHandler</code> 实例；<br>最后再将 Proxy对象强制转换为 Hello 接口对象<br>这段代码的运行效果如下：</li>
</ol>
<blockquote>
<p>Ready to say something<br>Hello Spring<br>Already say something</p>
</blockquote>
<p>tips:</p>
<ul>
<li>若是采用 CGLIB 代理是创建 ObjenesisCglibAopProxy,如果是 JDK 动态代理，AopProxyFactory 会创建 JdkDynamicAopProxy。</li>
</ul>
<h2 id="基于-AspectJ-的配置"><a href="#基于-AspectJ-的配置" class="headerlink" title="基于 @AspectJ 的配置"></a>基于 @AspectJ 的配置</h2><p>首先，需要引入 <code>org.springframework:spring-aspects</code> 依赖，以便使用 Aspect 相关的注解和功能。要开启 @AspectJ 支持，可以在 Java 配置类上增加 <code>@EnableAspectAutoProxy</code> 注解，比如像下面这样：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Configuration</span></span><br><span class="line"><span class="variable">@EnableAspectJAutoProxy</span></span><br><span class="line">public class Config&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p><code>@EnableAspectJAutoProxy</code> 有两个属性，<code>proxyTargetClass</code> 用于选择是否开启基于类的代理，即是否使用 CGLIB 来做代理；<code>exposeProxy</code> 用于选择是否将代理对象暴露到 AopContext 中，两者默认值都是 false</p>
<h3 id="声明切入点"><a href="#声明切入点" class="headerlink" title="声明切入点"></a>声明切入点</h3><p>注解方式的切入点声明由两部分组成–切入点表达式和切入点方法签名。前者用来描述要匹配的连接点，后者可以用来引用切入点，方便切入点的复用，具体如下面代码所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloPointCut</span> &#123;</span><br><span class="line">    <span class="meta">@PointCut(&quot;excution (public * say())&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOperation</span><span class="params">()</span>&#123;&#125; <span class="comment">//执行public的say()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Pointcut 注解中使用的就是 AspectJ5 的表达式，其中一些常用的 PCD （pointcut designator，切入点标识符）如下图所示：</p>
<p><img data-src="https://imgur.la/images/2025/05/16/PCD.png" alt="常用的PCD"></p>
<p>因为 excution用的非常多，下面详细描述一下它的表达式，[]代表可选项，&lt;&gt;代表必选项：</p>
<blockquote>
<p>execution([修饰符] &lt;返回类型&gt; [全限定类名].&lt;方法&gt;(&lt;参数&gt;)[异常])</p>
</blockquote>
]]></content>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
</search>
